#!/usr/bin/env python3
"""
An autogenerated testfile for python.
"""

import unittest
from io import StringIO
import os
import sys
from unittest.mock import patch
from unittest import TextTestRunner
from examiner import ExamTestCaseExam, ExamTestResultExam, tags
from examiner import import_module, find_path_to_assignment


FILE_DIR = os.path.dirname(os.path.realpath(__file__))
REPO_PATH = find_path_to_assignment(FILE_DIR)

if REPO_PATH not in sys.path:
    sys.path.insert(0, REPO_PATH)

# Path to file and basename of the file to import
$module = import_module(REPO_PATH, '$module')



class Test1$Module(ExamTestCaseExam):
    """
    Each assignment has 1 testcase with multiple asserts.
    The different asserts https://docs.python.org/3.6/library/unittest.html#test-cases
    """

    points_for_pass = 20
    points_worth = 20

    @classmethod
    def setUpClass(cls):
        """
        Is needed it the students write and read to files.
        """
        os.chdir(REPO_PATH)


    def check_print_contain(self, inp, correct):
        """
        One function for testing print input functions.
        """
        with patch("builtins.input", side_effect=inp):
            with patch("sys.stdout", new=StringIO()) as fake_out:
                str_data = fake_out.getvalue()
                self.assertIn(correct, str_data)


    '''
    @tags("a tag")
    def test_letter_name(self):
        """
        Testar DESCRIPTION
        Använder följande som input:
        {arguments}
        Förväntar att följande finns med i utskrift:
        {correct}
        Fick följande:
        {student}
        """
        # self.norepr = True
        self._multi_arguments = "a string"
        self.assertEqual(self._argument, $module.func_name())
    '''




if __name__ == '__main__':
    runner = TextTestRunner(resultclass=ExamTestResultExam, verbosity=2)
    unittest.main(testRunner=runner, exit=False)
