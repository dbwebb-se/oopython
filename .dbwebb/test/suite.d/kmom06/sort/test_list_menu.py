#!/usr/bin/env python3
"""
An autogenerated testfile for python.
"""

import unittest
from io import StringIO
import os
import sys
from unittest.mock import patch
from unittest import TextTestRunner
from examiner import ExamTestCase, ExamTestResult, tags
from examiner import import_module, find_path_to_assignment

FILE_DIR = os.path.dirname(os.path.realpath(__file__))
REPO_PATH = find_path_to_assignment(FILE_DIR)

if REPO_PATH not in sys.path:
    sys.path.insert(0, REPO_PATH)

Handler = import_module(REPO_PATH, 'main').Handler

class Test2SortMenu(ExamTestCase):
    """
    Each assignment has 1 testcase with multiple asserts.
    The different asserts https://docs.python.org/3.6/library/unittest.html#test-cases
    """

    link_to_assignment = "https://dbwebb.se/uppgift/skapa-lista"

    @classmethod
    def setUpClass(cls):
        """
        To find all relative files that are read or written to.
        """
        os.chdir(REPO_PATH)


    def check_print_contain(self, inp, correct=None):
        """
        One function for testing print input functions.
        """
        with patch("builtins.input", side_effect=inp):
            with patch("sys.stdout", new=StringIO()) as fake_out:
                h = Handler()
                try:
                    h.main()
                except SystemExit:
                    pass
                str_data = fake_out.getvalue()
                if correct is not None:
                    for val in correct:
                        self.assertIn(val, str_data)
                return h

    @tags("10")
    def test_a_sort_insertion(self):
        """
        Testar lägga till flera värden med menyval 1 och sorterar med menyval 10.
        Använder följande som input:
        {arguments}
        Förväntar att följande värde finns i listan på korrekt index:
        {correct}
        Innehöll:
        {student}
        """
        self.norepr = True
        self._multi_arguments  = ["1", "4", "continue", "1", "2", "continue", "1", "0", "continue", "1", "3", "continue", "10", "continue", "q"]
        h = self.check_print_contain(self._multi_arguments)
        self.assertEqual(str(h.list.get(0)), "0")
        self.assertEqual(str(h.list.get(1)), "2")
        self.assertEqual(str(h.list.get(2)), "3")
        self.assertEqual(str(h.list.get(3)), "4")



    @tags("11")
    def test_b_sort_recursive(self):
        """
        Testar lägga till flera värden med menyval 1 och sorterar med menyval 10.
        Använder följande som input:
        {arguments}
        Förväntar att följande värde finns i listan på korrekt index:
        {correct}
        Innehöll:
        {student}
        """
        self.norepr = True
        self._multi_arguments  = ["1", "hej", "continue", "1", "skorstten", "continue", "1", "apa", "continue", "1", "ko", "continue", "11", "continue", "q"]
        h = self.check_print_contain(self._multi_arguments)
        self.assertEqual(str(h.list.get(0)), "apa")
        self.assertEqual(str(h.list.get(1)), "hej")
        self.assertEqual(str(h.list.get(2)), "ko")
        self.assertEqual(str(h.list.get(3)), "skorstten")



if __name__ == '__main__':
    runner = TextTestRunner(resultclass=ExamTestResult, verbosity=2)
    unittest.main(testRunner=runner, exit=False)
