#!/usr/bin/env python3
"""
An autogenerated testfile for python.
"""

import io
import unittest
import unittest.mock
import os
import random
import sys
from io import StringIO
from unittest.mock import patch
from unittest import TextTestRunner
from examiner import ExamTestCase, ExamTestResult, tags
from examiner import import_module, find_path_to_assignment


FILE_DIR = os.path.dirname(os.path.realpath(__file__))
REPO_PATH = find_path_to_assignment(FILE_DIR)

if REPO_PATH not in sys.path:
    sys.path.insert(0, REPO_PATH)

# Path to file and basename of the file to import
list = import_module(REPO_PATH, 'src/unorderedlist')
sort = import_module(REPO_PATH, 'src/sort')

class Test1Sort(ExamTestCase):
    """
    Testing the class List.
    """
    def setUp(self):
        self.int_ulist = list.UnorderedList()
        self.int_ulist.append(3)
        self.int_ulist.append(5)
        self.int_ulist.append(111)
        self.int_ulist.append(1)
        self.int_ulist.append(34)
        self.int_ulist.append(0)
        self.int_ulist.append(11)
        self.int_list = [3, 5, 111, 1, 34, 0, 11]

        self.str_ulist = list.UnorderedList()
        self.str_ulist.append("hej")
        self.str_ulist.append("haha")
        self.str_ulist.append("22")
        self.str_ulist.append("2")
        self.str_ulist.append("34")
        self.str_ulist.append("222")
        self.str_list = ["hej", "22", "haha", "2", "34", "222"]

    @tags("sort", "insertion")
    def test_a_insertion_int(self):
        """
        insertion_sort
        Testar att sorterar en lista med heltal.
        Förväntar att följande lista är korrekt sorterad:
        {arguments}
        Förväntar värdet på en position:
        {correct}
        Fick istället följande värde på den positionen:
        {student}
        """
        self._argument = self.int_list
        sort.insertion_sort(self.int_ulist)
        sorted_list = sorted(self.int_list)
        for i in range(len(self.int_list)):
            self.assertEqual(self.int_ulist.get(i), sorted_list[i])


    @tags("sort", "insertion")
    def test_b_insertion_str(self):
        """
        insertion_sort
        Testar att sorterar en lista med strängar.
        Förväntar att följande lista är korrekt sorterad:
        {arguments}
        Förväntar värdet på en position:
        {correct}
        Fick istället följande värde på den positionen:
        {student}
        """
        self._argument = self.str_list
        sort.insertion_sort(self.str_ulist)
        sorted_list = sorted(self.str_list)
        for i in range(len(self.str_list)):
            self.assertEqual(self.str_ulist.get(i), sorted_list[i])

    @tags("sort", "insertion")
    def test_c_insertion_int_sort_twice(self):
        """
        insertion_sort
        Testar att sorterar en lista med heltal två gånger.
        Förväntar att följande lista är korrekt sorterad:
        {arguments}
        Förväntar värdet på en position:
        {correct}
        Fick istället följande värde på den positionen:
        {student}
        """
        self._argument = self.int_list
        sort.insertion_sort(self.int_ulist)
        sort.insertion_sort(self.int_ulist)
        sorted_list = sorted(self.int_list)
        for i in range(len(self.int_list)):
            self.assertEqual(self.int_ulist.get(i), sorted_list[i])

    @tags("sort", "insertion")
    def test_d_insertion_empty(self):
        """
        insertion_sort
        Testar att sorterar en tom lista.
        Förväntar att koden inte kraschar:
        {correct}
        Fick istället följande värde på den positionen:
        {student}
        """
        self._argument = []
        ul = list.UnorderedList()
        sort.insertion_sort(ul)
        self.assertEqual(ul.size(), 0)

    @tags("sort", "recursive")
    def test_e_recursive_int(self):
        """
        recursive_insertion
        Testar att sorterar en lista med heltal.
        Förväntar att följande lista är korrekt sorterad:
        {arguments}
        Förväntar värdet på en position:
        {correct}
        Fick istället följande värde på den positionen:
        {student}
        """
        self._argument = self.int_list

        try:
            sort.recursive_insertion(self.int_ulist)
        except TypeError as e:
            if "missing 1 required positional argument" in str(e):
                sort.recursive_insertion(self.int_ulist, self.int_ulist.size())
            else:
                raise e
        sorted_list = sorted(self.int_list)
        for i in range(len(self.int_list)):
            self.assertEqual(self.int_ulist.get(i), sorted_list[i])


    @tags("sort", "recursive")
    def test_f_recursive_str(self):
        """
        Testar att sorterar en lista med strängar.
        Förväntar att följande lista är korrekt sorterad:
        {arguments}
        Förväntar värdet på en position:
        {correct}
        Fick istället följande värde på den positionen:
        {student}
        """
        self._argument = self.str_list
        try:
            sort.recursive_insertion(self.str_ulist)
        except TypeError as e:
            if "missing 1 required positional argument" in str(e):
                sort.recursive_insertion(self.str_ulist, self.str_ulist.size())
            else:
                raise e
        sorted_list = sorted(self.str_list)
        for i in range(len(self.str_list)):
            self.assertEqual(self.str_ulist.get(i), sorted_list[i])

    @tags("sort", "recursive")
    def test_g_recursive_int_sort_twice(self):
        """
        Testar att sorterar en lista med heltal två gånger.
        Förväntar att följande lista är korrekt sorterad:
        {arguments}
        Förväntar värdet på en position:
        {correct}
        Fick istället följande värde på den positionen:
        {student}
        """
        self._argument = self.int_list
        try:
            sort.recursive_insertion(self.int_ulist)
            sort.recursive_insertion(self.int_ulist)
        except TypeError as e:
            if "missing 1 required positional argument" in str(e):
                sort.recursive_insertion(self.int_ulist, self.int_ulist.size())
                sort.recursive_insertion(self.int_ulist, self.int_ulist.size())
            else:
                raise e
        sorted_list = sorted(self.int_list)
        for i in range(len(self.int_list)):
            self.assertEqual(self.int_ulist.get(i), sorted_list[i])

    @tags("sort", "recursive")
    def test_h_recursive_empty(self):
        """
        Testar att sorterar en tom lista.
        Förväntar att koden inte kraschar:
        {correct}
        Fick istället följande värde på den positionen:
        {student}
        """
        self._argument = []
        ul = list.UnorderedList()
        try:
            sort.recursive_insertion(ul)
        except TypeError as e:
            if "missing 1 required positional argument" in str(e):
                sort.recursive_insertion(ul, ul.size())
            else:
                raise e
        self.assertEqual(ul.size(), 0)

if __name__ == '__main__':
    runner = TextTestRunner(resultclass=ExamTestResult, verbosity=2)
    unittest.main(testRunner=runner, exit=False)
