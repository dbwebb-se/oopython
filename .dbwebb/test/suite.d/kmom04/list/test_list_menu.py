#!/usr/bin/env python3
"""
An autogenerated testfile for python.
"""

import unittest
from io import StringIO
import os
import sys
from unittest.mock import patch
from unittest import TextTestRunner
from examiner import ExamTestCase, ExamTestResult, tags
from examiner import import_module, find_path_to_assignment

FILE_DIR = os.path.dirname(os.path.realpath(__file__))
REPO_PATH = find_path_to_assignment(FILE_DIR)

if REPO_PATH not in sys.path:
    sys.path.insert(0, REPO_PATH)

Handler = import_module(REPO_PATH, 'main').Handler

class Test2ListMenu(ExamTestCase):
    """
    Each assignment has 1 testcase with multiple asserts.
    The different asserts https://docs.python.org/3.6/library/unittest.html#test-cases
    """

    link_to_assignment = "https://dbwebb.se/uppgift/skapa-lista"

    @classmethod
    def setUpClass(cls):
        """
        To find all relative files that are read or written to.
        """
        os.chdir(REPO_PATH)


    def check_print_contain(self, inp, correct=None):
        """
        One function for testing print input functions.
        """
        with patch("builtins.input", side_effect=inp):
            with patch("sys.stdout", new=StringIO()) as fake_out:
                h = Handler()
                try:
                    h.main()
                except SystemExit:
                    pass
                str_data = fake_out.getvalue()
                if correct is not None:
                    for val in correct:
                        self.assertIn(val, str_data)
                return h

    @tags("1")
    def test_a_append(self):
        """
        Testar lägga till flera värden med menyval 1 och sen avslutar med Q
        Använder följande som input:
        {arguments}
        Förväntar att följande värde finns i listan på korrekt index:
        {correct}
        Innehöll:
        {student}
        """
        self.norepr = True
        self._multi_arguments  = ["1", "4", "continue", "1", "2", "continue", "1", "22", "continue", "q"]
        h = self.check_print_contain(self._multi_arguments)
        self.assertEqual(str(h.list.get(0)), "4")
        self.assertEqual(str(h.list.get(1)), "2")
        self.assertEqual(str(h.list.get(2)), "22")

    @tags("2")
    def test_b_get(self):
        """
        Testar lägga till flera värden med menyval 1 och sen hämtar värdet med get
        Använder följande som input:
        {arguments}
        Förväntar att följande värde skrivs ut:
        {correct}
        Innehöll:
        {student}
        """
        self.norepr = True
        self._multi_arguments  = ["1", "45", "continue", "1", "42", "continue", "2", "1", "continue", "q"]
        h = self.check_print_contain(self._multi_arguments, ["42"])


    @tags("2")
    def test_c_get_missing_index(self):
        """
        Testar lägga till flera värden med menyval 1 och sen hämtar värde med felaktigt index med get
        Använder följande som input:
        {arguments}
        Förväntar att följande text skrivs ut:
        {correct}
        Innehöll:
        {student}
        """
        self.norepr = True
        self._multi_arguments  = ["1", "45", "continue", "1", "42", "continue", "2", "12", "continue", "q"]
        h = self.check_print_contain(self._multi_arguments, ["Missing index"])


    @tags("3")
    def test_d_size_empty(self):
        """
        Testar att menyval 3 skriver ut rätt när listan är tom
        Använder följande som input:
        {arguments}
        Förväntar att följande värde skrivs ut:
        {correct}
        Innehöll:
        {student}
        """
        self.norepr = True
        self._multi_arguments  = ["3", "continue", "q"]
        h = self.check_print_contain(self._multi_arguments, ["0"])


    @tags("4")
    def test_e_set(self):
        """
        Testar lägga till flera värden med menyval 1 och sen skriver över det med menyval 4
        Använder följande som input:
        {arguments}
        Förväntar att följande värde finns i listan på korrekt index:
        {correct}
        Innehöll:
        {student}
        """
        self.norepr = True
        self._multi_arguments  = ["1", "100", "continue", "1", "142", "continue", "4", "1, 122", "continue", "q"]
        h = self.check_print_contain(self._multi_arguments)
        self.assertEqual(str(h.list.get(1)), "122")

    @tags("5")
    def test_f_print(self):
        """
        Testar att menyval 5 skriver ut hela listan
        Använder följande som input:
        {arguments}
        Förväntar att följande värde skrivs ut:
        {correct}
        Innehöll:
        {student}
        """
        self.norepr = True
        self._multi_arguments  = ["1", "100", "continue", "1", "142", "continue", "1", "122", "continue", "5", "continue", "q"]
        h = self.check_print_contain(self._multi_arguments, ["100", "142", "122"])


    @tags("6")
    def test_g_index_of(self):
        """
        Testar att menyval 6 skriver ut rätt index
        Använder följande som input:
        {arguments}
        Förväntar att följande värde skrivs ut:
        {correct}
        Innehöll:
        {student}
        """
        self.norepr = True
        self._multi_arguments  = ["1", "100", "continue", "1", "142", "continue", "1", "122", "continue", "6", "100", "continue", "q"]
        self.check_print_contain(self._multi_arguments, ["0"])

    @tags("6")
    def test_h_index_of_missing_value(self):
        """
        Testar lägga till flera värden med menyval 1 och sen hämtar index med felaktigt värde
        Använder följande som input:
        {arguments}
        Förväntar att följande text skrivs ut:
        {correct}
        Innehöll:
        {student}
        """
        self.norepr = True
        self._multi_arguments  = ["1", "45", "continue", "1", "42", "continue", "6", "555", "continue", "q"]
        h = self.check_print_contain(self._multi_arguments, ["Missing value"])


    @tags("7")
    def test_i_remove(self):
        """
        Testar att menyval 7 tar bort rätt värde och att menyval 6 skriver ut Missing value
        Använder följande som input:
        {arguments}
        Förväntar att följande skrivs ut:
        {correct}
        Innehöll:
        {student}
        """
        self.norepr = True
        self._multi_arguments  = ["1", "100", "continue", "1", "142", "continue", "1", "122", "continue", "7", "122", "continue", "6", "122", "continue", "q"]
        self.check_print_contain(self._multi_arguments, ["Missing value"])

    @tags("6")
    def test_j_remove_missing_value(self):
        """
        Testar att menyval 7 skriver ut rätt sak när värde saknas.
        Använder följande som input:
        {arguments}
        Förväntar att följande text skrivs ut:
        {correct}
        Innehöll:
        {student}
        """
        self.norepr = True
        self._multi_arguments  = ["1", "45", "continue", "1", "42", "continue", "7", "555", "continue", "q"]
        h = self.check_print_contain(self._multi_arguments, ["Missing value"])

if __name__ == '__main__':
    runner = TextTestRunner(resultclass=ExamTestResult, verbosity=2)
    unittest.main(testRunner=runner, exit=False)
