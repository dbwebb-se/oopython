#!/usr/bin/env python3
"""
An autogenerated testfile for python.
"""

import unittest
from io import StringIO
import os
import sys
from unittest.mock import patch
from unittest import TextTestRunner
from examiner import ExamTestCase, ExamTestResult, tags
from examiner import import_module, find_path_to_assignment


FILE_DIR = os.path.dirname(os.path.realpath(__file__))
REPO_PATH = find_path_to_assignment(FILE_DIR)

if REPO_PATH not in sys.path:
    sys.path.insert(0, REPO_PATH)

Handler = import_module(REPO_PATH, 'main').Handler

class Test2QueueMenu(ExamTestCase):
    """
    Each assignment has 1 testcase with multiple asserts.
    The different asserts https://docs.python.org/3.6/library/unittest.html#test-cases
    """

    link_to_assignment = "https://dbwebb.se/uppgift/skapa-queue"

    @classmethod
    def setUpClass(cls):
        """
        To find all relative files that are read or written to.
        """
        os.chdir(REPO_PATH)


    def check_print_contain(self, inp, correct=None):
        """
        One function for testing print input functions.
        """
        with patch("builtins.input", side_effect=inp):
            with patch("sys.stdout", new=StringIO()) as fake_out:
                h = Handler()
                try:
                    h.main()
                except SystemExit:
                    pass
                str_data = fake_out.getvalue()
                if correct is not None:
                    for val in correct:
                        self.assertIn(val, str_data)
                return h

    @tags("1")
    def test_a_add_values(self):
        """
        Testar lägga till flera värden med menyval 1 och sen avslutar med Q
        Använder följande som input:
        {arguments}
        Förväntar att kön innehåller så här många element (använder size()):
        {correct}
        Innehöll:
        {student}
        """
        self.norepr = True
        self._multi_arguments  = ["1", "4", "continue", "1", "2", "continue", "1", "22", "continue", "q"]
        h = self.check_print_contain(self._multi_arguments)
        self.assertEqual(h.queue.size(), 3)


    @tags("2")
    def test_b_remove_values(self):
        """
        Testar lägga till flera värden med menyval 1 och sen ta bort med menyval 2.
        Använder följande som input:
        {arguments}
        Förväntar att 44 tas bort och kön innehåller 2 element:
        Innehöll:
        {student}
        """
        self.norepr = True
        self._multi_arguments  = ["1", "44", "continue", "1", "2", "continue", "1", "22", "continue", "2", "continue", "q"]
        h = self.check_print_contain(self._multi_arguments, ["44"])
        self.assertEqual(h.queue.size(), 2)

    @tags("3")
    def test_c_peek(self):
        """
        Testar lägga till flera värden med menyval 1 och sen kollar på nästa element med menyval 3.
        Använder följande som input:
        {arguments}
        Förväntar att 42 skrivs ut och kön innehåller 3 element:
        Innehöll:
        {student}
        """
        self.norepr = True
        self._multi_arguments  = ["1", "42", "continue", "1", "2", "continue", "1", "22", "continue", "3", "continue", "q"]
        h = self.check_print_contain(self._multi_arguments, ["42"])
        self.assertEqual(h.queue.size(), 3)

    @tags("3")
    def test_c_peek_empty(self):
        """
        Testar att rätt sak skrivs ut när kön är tom och man använder menyval 3.
        Använder följande som input:
        {arguments}
        Förväntar att följande skrivs ut:
        {correct}
        Innehöll:
        {student}
        """
        self.norepr = True
        self._multi_arguments  = ["3", "continue", "q"]
        h = self.check_print_contain(self._multi_arguments, ["Queue is empty"])

    @tags("4")
    def test_d_size(self):
        """
        Testar lägga till flera värden med menyval 1 och sen kollar hur många som finns med menyval 4.
        Använder följande som input:
        {arguments}
        Förväntar att följande skrivs ut:
        {correct}
        Innehöll:
        {student}
        """
        self.norepr = True
        self._multi_arguments  = ["1", "42", "continue", "1", "2", "continue", "1", "22", "continue", "1", "356", "continue", "1", "142", "continue", "1", "108", "continue", "4", "continue", "q"]
        self.check_print_contain(self._multi_arguments, ["6"])

    @tags("5")
    def test_e_empty(self):
        """
        Kollar att menyval 5 skriver ut True när kön är tom.
        Använder följande som input:
        {arguments}
        Förväntar att följande skrivs ut:
        {correct}
        Innehöll:
        {student}
        """
        self.norepr = True
        self._multi_arguments  = ["1", "42", "continue", "1", "2", "continue", "1", "22", "continue", "2", "continue", "2", "continue", "2", "continue", "5", "continue", "q"]
        self.check_print_contain(self._multi_arguments, ["True"])

if __name__ == '__main__':
    runner = TextTestRunner(resultclass=ExamTestResult, verbosity=2)
    unittest.main(testRunner=runner, exit=False)
