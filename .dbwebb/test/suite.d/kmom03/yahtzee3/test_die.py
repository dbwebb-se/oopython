#!/usr/bin/env python3
"""
An autogenerated testfile for python.
"""

import unittest
import os
import random
import sys
from io import StringIO
from unittest.mock import patch
from unittest import TextTestRunner
from examiner import ExamTestCase, ExamTestResult, tags
from examiner import import_module, find_path_to_assignment


FILE_DIR = os.path.dirname(os.path.realpath(__file__))
REPO_PATH = find_path_to_assignment(FILE_DIR)

if REPO_PATH not in sys.path:
    sys.path.insert(0, REPO_PATH)

# Path to file and basename of the file to import
die = import_module(REPO_PATH, 'src/die')


class Test1Die(ExamTestCase):
    """
    Testing the class Die.
    """
    def setUp(self):
        random.seed("yahtzee")

    @tags("die")
    def test_if_value_is_private(self):
        """
        Testar att attributet är privat och heter _value.
        Förväntar att attributet heter _value:
        {correct}
        Innehöll följande:
        {student}
        """
        d1 = die.Die(6)
        self.assertTrue(hasattr(d1, "_value"))

    @tags("die")
    def test_value(self):
        """
        Testar att property `value` returnerar rätt värde.
        Skapar tärning med följande värde:
        {arguments}
        Förväntar att värdet 6 returneras:
        {correct}
        Innehöll följande:
        {student}
        """
        self._argument = 6
        d1 = die.Die(6)
        self.assertEqual(d1.value, 6)

    @tags("die")
    def test_value_property(self):
        """
        Testar att `value` är ett property.
        Förväntar att följande rad returnerar True, isinstance(type(d1).value, property):
        {correct}
        Innehöll följande:
        {student}
        """
        self._argument = 6
        d1 = die.Die(6)
        self.assertTrue(isinstance(type(d1).value, property))

    @tags("die")
    def test_get_name(self):
        """
        Testar att rätt namn på värdet returneras.
        Skapar tärning med följande värde:
        {arguments}
        Förväntar att "six" returneras:
        {correct}
        Innehöll följande:
        {student}
        """
        self._argument = 6
        d1 = die.Die(6)
        self.assertEqual(d1.get_name(), "six")

    @tags("die")
    def test_create_with_assigned_value(self):
        """
        Testar att tärningen får värdet 6 om den skapas med värdet 6.
        Förväntar att ett värdet på attributet value är 6 eftersom den skapas med 6:
        {correct}
        Innehöll följande:
        {student}
        """
        d1 = die.Die(6)
        self.assertEqual(d1._value, 6)

    @tags("die")
    def test_create_with_random_value(self):
        """
        Testar att det går att tärningen får ett värde om inte
        värde anges då tärningen skapas.
        Förväntar att ett värde har slumpats till attributet value:
        {correct}
        Innehöll följande:
        {student}
        """
        d1 = die.Die()
        self.assertEqual(d1._value, 2)

    @tags("die")
    def test_set_value_over_max_rolls(self):
        """
        Testar att maxvärdet returneras även om värdet sätts till 100 då
        en tärning skapas.
        Förväntar att värdet 6 returneras:
        {correct}
        Innehöll följande:
        {student}
        """
        d1 = die.Die(100)
        self.assertEqual(d1._value, 6)

    @tags("die")
    def test_set_value_below_min_rolls(self):
        """
        Testar att maxvärdet returneras även om värdet sätts till -1 då
        en tärning skapas.
        Förväntar att värdet 1 returneras:
        {correct}
        Innehöll följande:
        {student}
        """
        d1 = die.Die(-1)
        self.assertEqual(d1._value, 1)

    @tags("die")
    def test_magical_method_str(self):
        """
        Testar att den magiska funktionen __str__ funkar med str().
        Förväntar att värdet "1" returneras, om tärningen skapas med värdet 1:
        {correct}
        Innehöll följande:
        {student}
        """
        d1 = die.Die(-1)
        self.assertEqual(str(d1), "1")


    @tags("die")
    def test_roll(self):
        """
        Testar att roll() slumpar nytt värde.
        Förväntar att _value tilldelades nya värdet:
        {correct}
        _value tilldelades följande:
        {student}
        """
        d1 = die.Die()
        d1.roll()
        self.assertEqual(d1._value, 4)

    @tags("die")
    def test_magical_method_eq(self):
        """
        Testar att den magiska funktionen __eq__ kan jämföra heltal.
        Tärning skapas med värdet 5 och 5 används som heltal vi jämförelse.
        Förväntar att värdet True returneras:
        {correct}
        Innehöll följande:
        {student}
        """
        d1 = die.Die(5)
        self.assertTrue(d1 == 5)

    @tags("die")
    def test_magical_method_eq_die(self):
        """
        Testar att den magiska funktionen __eq__ kan jämföra med Die objekt.
        Skapar två Die objekt med värde 3 och jämför.
        Förväntar att värdet True returneras:
        {correct}
        Innehöll följande:
        {student}
        """
        d1 = die.Die(3)
        d2 = die.Die(3)
        self.assertTrue(d1 == d2)

    @tags("die")
    def test_magical_method_eq_false(self):
        """
        Testar att den magiska funktionen __eq__ kan jämföra med Die objekt.
        Skapar ett Die objekt med värde 2 och ett med värde 4.
        Förväntar att värdet True returneras:
        {correct}
        Innehöll följande:
        {student}
        """
        d1 = die.Die(2)
        d2 = die.Die(4)
        self.assertFalse(d1 == d2)

if __name__ == '__main__':
    runner = TextTestRunner(resultclass=ExamTestResult, verbosity=2)
    unittest.main(testRunner=runner, exit=False)
