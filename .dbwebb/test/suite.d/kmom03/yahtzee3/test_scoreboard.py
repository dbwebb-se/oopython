#!/usr/bin/env python3
"""
An autogenerated testfile for python.
"""

import unittest
import os
import random
import sys
from io import StringIO
from unittest.mock import patch
from unittest import TextTestRunner
from examiner import ExamTestCase, ExamTestResult, tags
from examiner import import_module, find_path_to_assignment


FILE_DIR = os.path.dirname(os.path.realpath(__file__))
REPO_PATH = find_path_to_assignment(FILE_DIR)

if REPO_PATH not in sys.path:
    sys.path.insert(0, REPO_PATH)

# Path to file and basename of the file to import
scoreboard = import_module(REPO_PATH, 'src/scoreboard')
rules = import_module(REPO_PATH, 'src/rules')
hand = import_module(REPO_PATH, 'src/hand')

class Test1Scoreboard(ExamTestCase):
    """
    Testing the class Scoreboard.
    """
    @tags("scoreboard")
    def test_if_points_is_private(self):
        """
        Testar att attributet är privat och heter _points.
        Förväntar att attributet heter _points:
        {correct}
        Innehöll följande:
        {student}
        """
        sb = scoreboard.Scoreboard()
        self.assertTrue(hasattr(sb, "_points"))

    @tags("scoreboard")
    def test_get_total_points_empty_scoreboard(self):
        """
        Testar att get_total_points returnerar 0 från en tom scoreboard.
        Förväntar att värdet 0 returneras:
        {correct}
        Innehöll följande:
        {student}
        """
        sb = scoreboard.Scoreboard()
        self.assertEqual(sb.get_total_points(), 0)

    @tags("scoreboard")
    def test_get_total_points_rule_one(self):
        """
        Testar att get_total_points returnerar 3 från scoreboard med 3 ettor.
        scoreboard: [3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
        Förväntar att värdet 3 returneras:
        {correct}
        Innehöll följande:
        {student}
        """
        sb = scoreboard.Scoreboard([3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1])
        self.assertEqual(sb.get_total_points(), 3)

    @tags("scoreboard")
    def test_get_total_points_several_rules(self):
        """
        Testar att get_total_points returnerar rätt poängsumma med följande
        scoreboard: [3, -1, 9, -1, -1, -1, -1, -1, -1, -1, 50, -1]
        Förväntar att värdet 62 returneras:
        {correct}
        Innehöll följande:
        {student}
        """
        sb = scoreboard.Scoreboard([3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1])
        self.assertEqual(sb.get_total_points(), 3)

    @tags("scoreboard")
    def test_add_points_rule_yahtzee(self):
        """
        Testar att add_points funkar för Yahtzee med hand [6, 6, 6, 6, 6] och följande
        scoreboard: [3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
        Förväntar att värdet 53 returneras:
        {correct}
        Innehöll följande:
        {student}
        """
        sb = scoreboard.Scoreboard([3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1])
        h = hand.Hand([6, 6, 6, 6, 6])
        sb.add_points("Yahtzee", h)
        self.assertEqual(sb.get_total_points(), 53)

    @tags("scoreboard")
    def test_get_points_from_rule_with_score(self):
        """
        Testar att get_points hämtar poäng för "Ones" med följande
        scoreboard: [3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
        Förväntar att värdet 3 returneras:
        {correct}
        Innehöll följande:
        {student}
        """
        sb = scoreboard.Scoreboard([3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1])
        self.assertEqual(sb.get_points("Ones"), 3)

    @tags("scoreboard")
    def test_get_points_from_rule_without_score(self):
        """
        Testar att get_points hämtar poäng för "Twos" med följande
        scoreboard: [3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
        Förväntar att värdet -1 returneras:
        {correct}
        Innehöll följande:
        {student}
        """
        sb = scoreboard.Scoreboard([3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1])
        self.assertEqual(sb.get_points("Twos"), -1)

    @tags("scoreboard")
    def test_finished_not_true(self):
        """
        Testar att finished returnerar False från en tom scoreboard.
        Förväntar att värdet False returneras:
        {correct}
        Innehöll följande:
        {student}
        """
        sb = scoreboard.Scoreboard()
        self.assertFalse(sb.finished())

    @tags("scoreboard")
    def test_finished_true(self):
        """
        Testar att finished returnerar True från följande scoreboard:
        [3, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0]
        Förväntar att värdet True returneras:
        {correct}
        Innehöll följande:
        {student}
        """
        sb = scoreboard.Scoreboard([3, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0])
        self.assertTrue(sb.finished())

    @tags("scoreboard")
    def test_from_dict(self):
        """
        Testar att from_dict med följande scoreboard:
        {[3, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0]}
        Förväntar att värdet True returneras:
        {correct}
        Innehöll följande:
        {student}
        """
        sb = scoreboard.Scoreboard.from_dict([3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1])
        self.assertTrue(sb.get_total_points(), 3)


if __name__ == '__main__':
    runner = TextTestRunner(resultclass=ExamTestResult, verbosity=2)
    unittest.main(testRunner=runner, exit=False)
