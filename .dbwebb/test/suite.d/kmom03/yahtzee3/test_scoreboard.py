#!/usr/bin/env python3
"""
An autogenerated testfile for python.
"""

import unittest
import os
import random
import sys
from io import StringIO
from unittest.mock import patch
from unittest import TextTestRunner
from examiner import ExamTestCase, ExamTestResult, tags
from examiner import import_module, find_path_to_assignment


FILE_DIR = os.path.dirname(os.path.realpath(__file__))
REPO_PATH = find_path_to_assignment(FILE_DIR)

if REPO_PATH not in sys.path:
    sys.path.insert(0, REPO_PATH)

# Path to file and basename of the file to import
scoreboard = import_module(REPO_PATH, 'src/scoreboard')
rules = import_module(REPO_PATH, 'src/rules')
hand = import_module(REPO_PATH, 'src/hand')

class Test1Scoreboard(ExamTestCase):
    """
    Testing the class Scoreboard.
    """
    # @tags("scoreboard")
    # def test_if_points_is_private(self):
    #     """
    #     Testar att attributet är privat och heter _points.
    #     Förväntar att attributet heter _points:
    #     {correct}
    #     Innehöll följande:
    #     {student}
    #     """
    #     sb = scoreboard.Scoreboard()
    #     self.assertTrue(hasattr(sb, "_points"))

    def setUp(self):
        self.empty_dict = {
            "Ones": -1,
            "Twos": -1,
            "Threes": -1,
            "Fours": -1,
            "Fives": -1,
            "Sixes": -1,
            "Three Of A Kind": -1,
            "Four Of A Kind": -1,
            "Full House": -1,
            "Small Straight": -1,
            "Large Straight": -1,
            "Yahtzee": -1,
            "Chance": -1,
        }
        self.a_dict = {
            "Ones": 3,
            "Twos": -1,
            "Threes": -1,
            "Fours": -1,
            "Fives": -1,
            "Sixes": -1,
            "Three Of A Kind": -1,
            "Four Of A Kind": -1,
            "Full House": -1,
            "Small Straight": -1,
            "Large Straight": -1,
            "Yahtzee": -1,
            "Chance": -1,
        }
        self.full_dict = {
            "Ones": 3,
            "Twos": 2,
            "Threes": 0,
            "Fours": 4,
            "Fives": 0,
            "Sixes": 0,
            "Three Of A Kind": 0,
            "Four Of A Kind": 0,
            "Full House": 0,
            "Small Straight": 0,
            "Large Straight": 0,
            "Yahtzee": 0,
            "Chance": 10
        }

    def tearDown(self):
        self.empty_dict = {}
        self.a_dict = {}
        self.full_dict = {}



    @tags("scoreboard")
    def test_get_total_points_empty_scoreboard(self):
        """
        Testar att get_total_points returnerar 0 från en tom scoreboard.
        Scoreboard.from_dict: {arguments}
        Förväntar att värdet 0 returneras:
        {correct}
        Innehöll följande:
        {student}
        """
        self._argument = self.empty_dict
        sb = scoreboard.Scoreboard.from_dict(self.empty_dict)
        self.assertEqual(sb.get_total_points(), 0)

    @tags("scoreboard")
    def test_get_total_points_rule_one(self):
        """
        Testar att get_total_points returnerar 3 från scoreboard med 3 ettor.
        Scoreboard.from_dict: {arguments}
        Förväntar att värdet 3 returneras:
        {correct}
        Innehöll följande:
        {student}
        """
        self._argument = self.a_dict
        sb = scoreboard.Scoreboard.from_dict(self.a_dict)
        self.assertEqual(sb.get_total_points(), 3)


    @tags("scoreboard")
    def test_get_total_points_several_rules(self):
        """
        Testar att get_total_points returnerar rätt poängsumma med följande
        Scoreboard.from_dict: {arguments}
        Förväntar att värdet 62 returneras:
        {correct}
        Innehöll följande:
        {student}
        """
        self.a_dict["Threes"] = 9
        self.a_dict["Yahtzee"] = 50
        self._argument = self.a_dict
        sb = scoreboard.Scoreboard.from_dict(self.a_dict)
        self.assertEqual(sb.get_total_points(), 62)

    @tags("scoreboard")
    def test_add_points_rule_yahtzee(self):
        """
        Testar att add_points funkar för Yahtzee med hand [6, 6, 6, 6, 6] och följande
        Scoreboard.from_dict: {arguments}
        Förväntar att värdet 53 returneras:
        {correct}
        Innehöll följande:
        {student}
        """
        self._argument = self.a_dict
        sb = scoreboard.Scoreboard.from_dict(self.a_dict)
        h = hand.Hand([6, 6, 6, 6, 6])
        sb.add_points("Yahtzee", h)
        self.assertEqual(sb.get_total_points(), 53)

    @tags("scoreboard")
    def test_add_points_rule_yahtzee_again(self):
        """
        Testar att add_points för Yahtzee kastar exception när den redan har poäng.
        Scoreboard.from_dict: {arguments}
        Förväntar att ValueError ska lyftas:
        {correct}
        Inget Error lyftes
        {student}
        """
        self.a_dict["Yahtzee"] = 50
        self._argument = self.a_dict
        sb = scoreboard.Scoreboard.from_dict(self.a_dict)
        h = hand.Hand([6, 6, 6, 6, 6])
        with self.assertRaises(ValueError):
            sb.add_points("Yahtzee", h)

    @tags("scoreboard")
    def test_get_points_from_rule_with_score(self):
        """
        Testar att get_points hämtar poäng för "Ones" med följande
        Scoreboard.from_dict: {arguments}
        Förväntar att värdet 3 returneras:
        {correct}
        Innehöll följande:
        {student}
        """
        self._argument = self.a_dict
        sb = scoreboard.Scoreboard.from_dict(self.a_dict)
        self.assertEqual(sb.get_points("Ones"), 3)

    @tags("scoreboard")
    def test_get_points_from_rule_without_score(self):
        """
        Testar att get_points hämtar poäng för "Twos" med följande
        Scoreboard.from_dict: {arguments}
        Förväntar att värdet -1 returneras:
        {correct}
        Innehöll följande:
        {student}
        """
        self._argument = self.a_dict
        sb = scoreboard.Scoreboard.from_dict(self.a_dict)
        self.assertEqual(sb.get_points("Twos"), -1)

    @tags("scoreboard")
    def test_finished_not_true(self):
        """
        Testar att finished returnerar False från en icke full 
        Scoreboard.from_dict: {arguments}
        Förväntar att värdet False returneras:
        {correct}
        Innehöll följande:
        {student}
        """
        self._argument = self.a_dict
        sb = scoreboard.Scoreboard.from_dict(self.a_dict)
        self.assertFalse(sb.finished())

    @tags("scoreboard")
    def test_finished_true(self):
        """
        Testar att finished returnerar True från följande
        Scoreboard.from_dict: {arguments}
        Förväntar att värdet True returneras:
        {correct}
        Innehöll följande:
        {student}
        """
        self._argument = self.full_dict
        sb = scoreboard.Scoreboard.from_dict(self.full_dict)
        self.assertTrue(sb.finished())



if __name__ == '__main__':
    runner = TextTestRunner(resultclass=ExamTestResult, verbosity=2)
    unittest.main(testRunner=runner, exit=False)
