#!/usr/bin/env python3
"""
An autogenerated testfile for python.
"""

import unittest
import os
import random
import sys
from io import StringIO
from unittest.mock import patch
from unittest import TextTestRunner
from examiner import ExamTestCase, ExamTestResult, tags
from examiner import import_module, find_path_to_assignment


FILE_DIR = os.path.dirname(os.path.realpath(__file__))
REPO_PATH = find_path_to_assignment(FILE_DIR)

if REPO_PATH not in sys.path:
    sys.path.insert(0, REPO_PATH)

# Path to file and basename of the file to import
die = import_module(REPO_PATH, 'src/die')
hand = import_module(REPO_PATH, 'src/hand')


class Test1Die(ExamTestCase):
    """
    Testing the class Die.
    """
    def setUp(self):
        random.seed("yahtzee")

    @tags("die")
    def test_if_value_is_private(self):
        """
        Testar att attributet är privat och heter _value.
        Förväntar att attributet heter _value:
        {correct}
        Innehöll följande:
        {student}
        """
        d1 = die.Die(6)
        self.assertTrue(hasattr(d1, "_value"))

    @tags("die")
    def test_get_value(self):
        """
        Testar att rätt värde returneras.
        Förväntar att värdet 6 returneras:
        {correct}
        Innehöll följande:
        {student}
        """
        d1 = die.Die(6)
        self.assertEqual(d1.get_value(), 6)

    @tags("die")
    def test_get_name(self):
        """
        Testar att rätt namn på värdet returneras.
        Förväntar att "six" returneras:
        {correct}
        Innehöll följande:
        {student}
        """
        d1 = die.Die(6)
        self.assertEqual(d1.get_name(), "six")

    @tags("die")
    def test_create_with_assigned_value(self):
        """
        Testar att tärningen får värdet 6 om den skapas med värdet 6.
        Förväntar att ett värdet på attributet value är 6 eftersom den skapas med 6:
        {correct}
        Innehöll följande:
        {student}
        """
        d1 = die.Die(6)
        self.assertEqual(d1._value, 6)

    @tags("die")
    def test_create_with_random_value(self):
        """
        Testar att det går att tärningen får ett värde om inte
        värde anges då tärningen skapas.
        Förväntar att ett värde har slumpats till attributet value:
        {correct}
        Innehöll följande:
        {student}
        """
        d1 = die.Die()
        self.assertEqual(d1._value, 2)

    @tags("die")
    def test_set_value_over_max_rolls(self):
        """
        Testar att maxvärdet returneras även om värdet sätts till 100 då
        en tärning skapas.
        Förväntar att värdet 6 returneras:
        {correct}
        Innehöll följande:
        {student}
        """
        d1 = die.Die(100)
        self.assertEqual(d1.get_value(), 6)

    @tags("die")
    def test_set_value_below_min_rolls(self):
        """
        Testar att maxvärdet returneras även om värdet sätts till -1 då
        en tärning skapas.
        Förväntar att värdet 1 returneras:
        {correct}
        Innehöll följande:
        {student}
        """
        d1 = die.Die(-1)
        self.assertEqual(d1.get_value(), 1)

    @tags("die")
    def test_magical_method_str(self):
        """
        Testar att den magiska funktionen __str__ funkar med str().
        Förväntar att värdet "1" returneras:
        {correct}
        Innehöll följande:
        {student}
        """
        d1 = die.Die(-1)
        self.assertEqual(str(d1), "1")


class Test2Hand(ExamTestCase):
    """
    Testing the class Hand.
    """
    def setUp(self):
        random.seed("yahtzee")
        self.hand = hand.Hand()

    @tags("hand")
    def test_to_create_a_hand(self):
        """
        Testar att skapa en hand som innehåller 5 tärningar med slumpade värden.
        Förväntar att attributet dice är en lista med 5 tärningar:
        {correct}
        Innehöll följande:
        {student}
        """
        self.assertTrue(hasattr(self.hand, "dice"))
        self.assertEqual(len(self.hand.dice), 5)
        self.assertEqual(self.hand.dice[0].get_value(), 2)
        self.assertEqual(self.hand.dice[1].get_value(), 4)
        self.assertEqual(self.hand.dice[2].get_value(), 6)
        self.assertEqual(self.hand.dice[3].get_value(), 2)
        self.assertEqual(self.hand.dice[4].get_value(), 1)

    @tags("hand")
    def test_to_create_a_hand_with_dice(self):
        """
        Testar att skapa en hand som innehåller 5 tärningar med värden.
        Förväntar att attributet dice är en lista med 5 tärningar:
        {correct}
        Innehöll följande:
        {student}
        """
        new_hand = hand.Hand([6, 6, 6, 6, 6])
        self.assertTrue(hasattr(new_hand, "dice"))
        self.assertEqual(len(new_hand.dice), 5)
        self.assertEqual(new_hand.dice[0].get_value(), 6)
        self.assertEqual(new_hand.dice[1].get_value(), 6)
        self.assertEqual(new_hand.dice[2].get_value(), 6)
        self.assertEqual(new_hand.dice[3].get_value(), 6)
        self.assertEqual(new_hand.dice[4].get_value(), 6)

    @tags("hand")
    def test_to_reset_hand(self):
        """
        Testar att nollställa handen.
        Förväntar att attributet dice är nollställt:
        {correct}
        Innehöll följande:
        {student}
        """
        dice = self.hand.dice
        self.hand.reset()
        self.assertEqual(len(self.hand.dice), 5)
        self.assertNotEqual(self.hand.dice, dice)

    @tags("hand")
    def test_to_roll_hand_specific_dice(self):
        """
        Testar att slå om vissa av tärningarna i handen.
        Förväntar att attributet dice har fått följande värden:
        {correct}
        Innehöll följande:
        {student}
        """
        new_hand = self.hand
        new_hand.roll([0, 3, 4])
        self.assertEqual(new_hand.dice[0].get_value(), 4)
        self.assertEqual(new_hand.dice[1].get_value(), 4)
        self.assertEqual(new_hand.dice[2].get_value(), 6)
        self.assertEqual(new_hand.dice[3].get_value(), 1)
        self.assertEqual(new_hand.dice[4].get_value(), 2)

    @tags("hand")
    def test_to_roll_hand_specific_dice_out_of_index(self):
        """
        Testar att slå om vissa av tärningarna i handen.
        Förväntar att attributet dice har fått följande värden:
        {correct}
        Innehöll följande:
        {student}
        """
        with self.assertRaises(IndexError):
            self.hand.roll([0, 6])


    @tags("hand")
    def test_magical_method_str(self):
        """
        Testar att den magiska funktionen __str__ funkar med str().
        Förväntar att värdet "1" returneras:
        {correct}
        Innehöll följande:
        {student}
        """
        self.assertEqual(str(self.hand), "available: ['2', '4', '6', '2', '1']")


if __name__ == '__main__':
    runner = TextTestRunner(resultclass=ExamTestResult, verbosity=2)
    unittest.main(testRunner=runner, exit=False)
