#!/usr/bin/env python3
"""
An autogenerated testfile for python.
"""

import unittest
from io import StringIO
import os
import sys
from unittest.mock import patch
from unittest import TextTestRunner
from examiner import ExamTestCase, ExamTestResult, tags
from examiner import import_module, find_path_to_assignment

FILE_DIR = os.path.dirname(os.path.realpath(__file__))
REPO_PATH = find_path_to_assignment(FILE_DIR)

if REPO_PATH not in sys.path:
    sys.path.insert(0, REPO_PATH)

SpellChecker = import_module(REPO_PATH, 'spellchecker').SpellChecker

class Test2SpellcheckMenuExtra(ExamTestCase):
    """
    Each assignment has 1 testcase with multiple asserts.
    The different asserts https://docs.python.org/3.6/library/unittest.html#test-cases
    """

    link_to_assignment = "https://dbwebb.se/kurser/oopython-v2/kmom10"

    @classmethod
    def setUpClass(cls):
        """
        To find all relative files that are read or written to.
        """
        os.chdir(REPO_PATH)


    def check_print_contain(self, inp, correct=None):
        """
        One function for testing print input functions.
        """
        with patch("builtins.input", side_effect=inp):
            with patch("sys.stdout", new=StringIO()) as fake_out:
                h = SpellChecker()
                try:
                    h.main()
                except SystemExit:
                    pass
                str_data = fake_out.getvalue()
                if correct is not None:
                    for val in correct:
                        self.assertIn(val, str_data)
                return str_data



    @staticmethod
    def find_index(word, container):
        for index, element in enumerate(container):
            if word == element.split(" ")[0]:
                return index
        return -1

    @tags("2")
    def test_a_prefix_with_frequency(self):
        """
        Testar att orden skrivs ut i frekvens ordning i menyval 2.
        Använder följande som input:
        {arguments}
        Förväntar att följande ord skrivs ut i rätt ordning (siffran är index position från första ordet i utskriften):
        {correct}
        Skrevs ut med index (-1 betyder att ordet inte skrevs ut):
        {student}
        """
        self.norepr = True
        self._multi_arguments  = ["2", "alo", "quit", "continue", "6"]
        output = self.check_print_contain(self._multi_arguments).split("\n")
        for index, line in enumerate(output):
            if "alone" == line.split(" ")[0]:
                print(line)
                start_index = index
            if "alopecia" == line.split(" ")[0]:
                end_index = index
                break
        only_words = output[start_index:end_index+1]
        print(only_words)
        words = [
            ("alone", "0"),
            ("along", "1"),
            ("aloud", "2"),
            ("alongside", "3"),
            ("aloft", "4"),
            ("aloof", "5"),
            ("aloofness", "6"),
            ("aloe", "7"),
            ("aloneness", "8"),
            ("alopecia", "9"),
        ]
        for word in words:
            self.assertEqual(f'{word[0]} {self.find_index(word[0], only_words)}', f"{word[0]} {word[1]}")



if __name__ == '__main__':
    runner = TextTestRunner(resultclass=ExamTestResult, verbosity=2)
    unittest.main(testRunner=runner, exit=False)
