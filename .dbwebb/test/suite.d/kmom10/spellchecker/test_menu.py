#!/usr/bin/env python3
"""
An autogenerated testfile for python.
"""

import unittest
from io import StringIO
import os
import sys
from unittest.mock import patch
from unittest import TextTestRunner
from examiner import ExamTestCase, ExamTestResult, tags
from examiner import import_module, find_path_to_assignment

FILE_DIR = os.path.dirname(os.path.realpath(__file__))
REPO_PATH = find_path_to_assignment(FILE_DIR)

if REPO_PATH not in sys.path:
    sys.path.insert(0, REPO_PATH)

SpellChecker = import_module(REPO_PATH, 'spellchecker').SpellChecker

class Test1SpellcheckMenu(ExamTestCase):
    """
    Each assignment has 1 testcase with multiple asserts.
    The different asserts https://docs.python.org/3.6/library/unittest.html#test-cases
    """

    link_to_assignment = "https://dbwebb.se/kurser/oopython-v2/kmom10"

    @classmethod
    def setUpClass(cls):
        """
        To find all relative files that are read or written to.
        """
        os.chdir(REPO_PATH)


    def check_print_contain(self, inp, correct=None):
        """
        One function for testing print input functions.
        """
        with patch("builtins.input", side_effect=inp):
            with patch("sys.stdout", new=StringIO()) as fake_out:
                h = SpellChecker()
                try:
                    h.main()
                except SystemExit:
                    pass
                str_data = fake_out.getvalue()
                if correct is not None:
                    for val in correct:
                        self.assertIn(val, str_data)
                return str_data

    @tags("1")
    def test_a_check_if_word_exist(self):
        """
        Testar kolla att ordet "would" finns i ordlistan.
        Använder följande som input:
        {arguments}
        Förväntar att följande skrivs ut:
        {correct}
        Innehöll:
        {student}
        """
        self.norepr = True
        self._multi_arguments  = ["1", "would", "continue", "6"]
        h = self.check_print_contain(self._multi_arguments, ["word is spelled correctly"])


    @tags("1")
    def test_b_check_if_word_not_exist(self):
        """
        Testar kolla att ordet "ko" inte finns i ordlistan.
        Använder följande som input:
        {arguments}
        Förväntar att följande skrivs ut:
        {correct}
        Innehöll:
        {student}
        """
        self.norepr = True
        self._multi_arguments  = ["1", "ko", "continue", "6"]
        h = self.check_print_contain(self._multi_arguments, ["word does not exist"])



    @tags("2")
    def test_c_3_letters_show_all_words(self):
        """
        Testar kolla att ordet prefixet "mos" visar korrekt ord.
        Använder följande som input:
        {arguments}
        Förväntar att följande skrivs ut:
        {correct}
        Innehöll:
        {student}
        """
        self.norepr = True
        self._multi_arguments  = ["2", "mos", "quit", "continue", "6"]
        h = self.check_print_contain(self._multi_arguments, [
            "most",
            "mostly",
            "moss",
            "mosque",
            "mosquitoes",
            "mosquito",
            "mosaic",
            "mosquitos",
        ])



    @tags("2")
    def test_d_writing_more_letters_show_correct(self):
        """
        Testar kolla att skriva in fler bokstäver som prefix visar korrekt ord rätt antal gånger.
        Använder följande som input:
        {arguments}
        Förväntar att följande ord skrivs ut rätt antal gånger:
        {correct}
        Skrevs ut X gånger:
        {student}
        """
        self.norepr = True
        self._multi_arguments  = ["2", "lot", "t", "e", "r", "quit", "continue", "6"]
        output = self.check_print_contain(self._multi_arguments)
        words = [
            ("lots", "1"),
            ("loth", "2"),
            ("lottery", "4"),
            ("lotus", "1"),
            ("lothario", "1"),
            ("lotto", "2"),
            ("lotta", "2"),
        ]
        for word in words:
            self.assertEqual(f'{word[0]} {output.count(word[0])}', f"{word[0]} {word[1]}")

    @staticmethod
    def find_index(word, container):
        for index, element in enumerate(container):
            if word == element.split(" ")[0]:
                return index
        return -1

    @tags("4")
    def test_e_print_all_words(self):
        """
        Testar att orden skrivs ut i bokstavsordning i menyval 4.
        Använder följande som input:
        {arguments}
        Förväntar att följande ord skrivs ut i rätt ordning (siffran är index position från första ordet i utskriften):
        {correct}
        Skrevs ut med index (-1 betyder att ordet inte skrevs ut):
        {student}
        """
        self.norepr = True
        self._multi_arguments  = ["4", "continue", "6"]
        output = self.check_print_contain(self._multi_arguments).split("\n")
        for index, line in enumerate(output):
            if "aachen" in line:
                start_index = index
            if "zymotic" in line:
                end_index = index
                break
        only_words = output[start_index:end_index+1]
        words = [
            ("aachen", "0"),
            ("aargau", "1"),
            ("abalones", "9"),
            ("zouave", "25392"),
            ("affliction", "787"),
            ("driving", "7193"),
            ("comparing", "4782"),
            ("outlandish", "15889"),
            ("disallowed", "6672"),
            ("rusticate", "19352"),
            ("acquirer", "524"),
            ("zyme", "25400"),
            ("zymotic", "25401"),
        ]
        for word in words:
            self.assertEqual(f'{word[0]} {self.find_index(word[0], only_words)}', f"{word[0]} {word[1]}")


    @tags("5")
    def test_f_remove_word(self):
        """
        Kollar först att ordet "toolbox" finns, raderar det och kollar att ordet inte finns.
        Använder följande som input:
        {arguments}
        Förväntar att följande skrivs ut:
        {correct}
        Följande skrevs ut:
        {student}
        """
        self.norepr = True
        self._multi_arguments  = ["1", "toolbox", "continue", "5", "toolbox", "continue", "1", "toolbox", "continue", "6"]
        h = self.check_print_contain(self._multi_arguments, ["word is spelled correctly", "word does not exist"])

    @tags("5")
    def test_g_remove_non_existing_word(self):
        """
        Testar ta bort ord som inte finns.
        Använder följande som input:
        {arguments}
        Förväntar att följande skrivs ut:
        {correct}
        Följande skrevs ut:
        {student}
        """
        self.norepr = True
        self._multi_arguments  = ["5", "kosadel", "continue", "6"]
        h = self.check_print_contain(self._multi_arguments, ["word is missing"])



if __name__ == '__main__':
    runner = TextTestRunner(resultclass=ExamTestResult, verbosity=2)
    unittest.main(testRunner=runner, exit=False)
